[tool.poetry]
name = "discovery-converter"
version = "0.1.0"
description = "A tool to convert API discovery spec to JSON schemas"
authors = ["Ignacio Guerrero <1658961+itolosa@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
jsonschema = "^4.23.0"
pyyaml = "^6.0.2"


[tool.poetry.group.dev.dependencies]
mypy = "^1.11.2"
pytest = "^8.3.2"
ruff = "^0.6.2"
pytest-cov = "^5.0.0"
types-jsonschema = "^4.23.0.20240813"
types-pyyaml = "^6.0.12.20240808"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
python_version = "3.12"
strict = true
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

[tool.ruff]
src = ["src", "tests"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN101",  # Missing type annotation for self in method
  "ANN102",  # Missing type annotation for cls in classmethod
  "D212",    # Multi-line docstring summary should start at the first line
  "D203",    # 1 blank line required before class docstring
  "COM812",  # Missing trailing comma
  "ISC001",  # Implicit string concatenation on a single line
  "CPY001",  # Missing copyright notice at top of file
  "TCH003",  # Move stdlib import into a type-checking block
  "TCH001",  # Move application import into a type-checking block
  "TCH002",  # Move third-party import into a type-checking block
  "D100",    # Missing docstring in public module
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic method
  "D107",    # Missing docstring in __init__
  "PLR6301", # Method `...` could be a function, class method, or static method
  "A002",    # Argument `id` is shadowing a Python builtin
  "A001",    # Variable `id` is shadowing a Python builtin
  "D103",    # Missing docstring in public function
  "TRY003",  # Avoid specifying long messages outside the exception class
  "DOC201",  # Return is not documented in the docstring
]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = [
  "S101",    # Use of the assert keyword.
  "D",       # Pydocstyle checks
  "PGH004",  # Too broad noqa annotations
  "PLR2004", # Magic value used in comparison, consider replacing `3` with a constant variable
]

[tool.coverage.run]
omit = ["generate.py"]

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false
force-wrap-aliases = true

[tool.pytest.ini_options]
addopts = [
  "--strict-markers",
  "--cov=.",
  "--cov-report=term-missing",
  "--junitxml=junit.xml",
  "--cov-fail-under=100",
  "--cov-branch",
  "--cov-context=test",
]
testpaths = ["tests"]
markers = [
  "integration: mark a test as an integration test.",
  "unit: mark a test as a unit test.",
]
